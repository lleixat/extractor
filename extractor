#!/bin/sh
SVR_ROOT=$HOME'/Dev/bois_en_jouet/nw/'
INCLUDE="*.php"
EXCLUDE="*\.git*"
OPT="-Po" # man grep for more options

function_construct ()
{
	echo -e "## Extracting '$1' :\n"
	grep $OPT $2 $SVR_ROOT -R --include=$INCLUDE --exclude=$EXCLUDE | sort -u
	echo -e "\n"
}

show_help ()
{
saveIFS=$IFS
IFS='\n' read -r -d '' HELP << 'EOF'
Usage:  extractor [option] [file]
        extractor --class
        extractor -f -o path/to/outputfile.txt

Options :
  -s,  --style-class     Search for html "class" attribute.
  -c,  --class           Search for php classes.
  -f,  --function        Search for php method/function name.
  -p,  --parameters      Search for php method/functions parameters.
  -F,  --function-param  Search for php method/functions and parameters.
  -k,  --comments        Search for php comments.
  -o,  --out             Write output in file.
  -h,  --help            This help.

EOF

echo "$HELP"

IFS=$saveIFS

}

if ! opt=$(getopt -o scfpFkho: -l style-class,class,function,parameters,function-param,comments,out,help: -- "$@")
then
    show_help
    exit 1
fi

set -- $opt 

while [ $# -gt 0 ]
do
    case "$1" in
        -s|--style-class)
            COM="Style Class"
            PATTERN='class="\K.*?(?=")'
            ;;
        -c|--class)
            COM="Classes"
            PATTERN='class \K.*?(?=\n)'
            ;;
        -f|--function)
            COM="function"
            PATTERN='function \K.*?(?=\()'
            ;;
        -p|--parameters)
            COM="Functions parameters"
            PATTERN='function .*\(\K.*?(?=\))'
            ;;
        -F|--function-param)
            COM="Functions with parameters"
            PATTERN='function .*\(\K.*?(?=\n)'
            ;;
        -k|--comments)
            COM="Functions with parameters"
            PATTERN='\/\*\K.*?(?=(\*\/\n))'
            ;;
        -o|--out)
            OUT=`eval echo $2`
            shift
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "$0: error - unrecognized option $1" 1>&2; exit 1
            show_help
            break
            ;;
    esac
    
    shift
    
    if [[ -z $RES ]]; then
        padding=""
    else
        padding="\n\n\n"
    fi
    
    RES="$RES$padding$(function_construct $COM $PATTERN)"

done

if [[ -z $COM || -z $PATTERN ]]; then
    echo -e "$0: Please choose an 'scfpFkho' option !\n"
    show_help
    exit 0
fi

if [[ ! -z $OUT ]]; then
    echo -e "${RES}" >> "$OUT"
else
    echo -e "${RES}"
fi

exit 0

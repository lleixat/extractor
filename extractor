#!/bin/sh

#
# Author   : Thomas Lleixa
# Creation : 06 janv. 2013
# Contact  : <thomas.lleixa@gmail.com>
#

SVR_ROOT='nw/'
EXEC='/usr/bin/vendor_perl/ack'
INCLUDE="php"
OPT="i"             # `ack-grep` --help for more options
#DEBUG="echo -E"      # Comment/uncomment to disable/enable debug

### Main functions
_construct ()
{
    # define the output with color or not
    _color_toggle
    _add_padding
    
    echo -n "## Extracting '$1' [$2]: ##"
    echo -e "\n"
    $DEBUG $EXEC -"$OPT" $OPT2 "$2" $SVR_ROOT -R --noenv --type=$INCLUDE --flush --group $color
}

_color_toggle ()
{
    # Set color only in terminal exec
    if [[ -z $OUT ]] &&  [[ $OPT2 != "--nocolor" ]]; then
        color="--color"
    fi
}

_add_padding ()
{
    # Add vertical space only when two options are called  
    if [[ ! -z $RES ]]; then
        echo -e "\n\n"
    fi
}

_output ()
{
    # Define -o option
    if [[ ! -z $OUT ]]; then
        echo "${RES}" >> "$OUT"
    else
        echo "${RES}"
    fi
}

_show_help ()
{
saveIFS=$IFS
IFS='\n' read -r -d '' HELP << 'EOF'
Usage:  extractor [option] [file]
        extractor --class
        extractor -f -o path/to/outputfile.txt

Options :
  -s,  --style-class     Search for html "class" attribute.
  -d,  --style-id        Search for html "id" attribute.
  -c,  --class           Search for php classes.
  -f,  --function        Search for php method/function name.
  -p,  --parameters      Search for php method/functions parameters.
  -F,  --function-param  Search for php method/functions and parameters.
  -k,  --comments        Search for php comments.
  -o,  --out             Write output in file. Disable color output automagically.
  -h,  --help            This help.

EOF

echo "$HELP"

IFS=$saveIFS

}

_show_error ()
{
    echo "$0: error - unrecognized option $1" 1>&2; exit 1
    _show_help
}

### Let's go...

# handle options in pseudo GNU style
if ! opt=$(getopt -o dscfpFkho: -l style-id,style-class,class,function,parameters,function-param,comments,out,help: -- "$@")
then
    _show_help
    exit 1
fi

set -- $opt

while [ $# -gt 0 ]
do
    case "$1" in
        -d|--style-id)
            COM="Style Id"
            OPT2="-o"
            PATTERN='id="\K.*?(?=")'
            ;;
        -s|--style-class)
            COM="Style Class"
            OPT2="-o"
            PATTERN='class="\K.*?(?=")'
            ;;
        -c|--class)
            COM="PHP Classes"
            OPT2="-o"
            PATTERN='^(?!((\s*|\t*)|(\s*\t*)*)(#|\/\/|\*)).*(class \K.*?(?={)|class \K.*?(?=\n)|class \K.*?(?=extends))'
            ;;
        -f|--function)
            COM="function"
            OPT2="-o"
            PATTERN='^(?!((\s*|\t*)|(\s*\t*)*)(#|\/\/|\*)).*(function \K.*?(?=\())'
            ;;
        -p|--parameters)
            COM="Functions parameters"
            OPT2="-o"
            PATTERN='^(?!((\s*|\t*)|(\s*\t*)*)(#|\/\/|\*)).*(function .*\(\K.*?(?=\)))'
            ;;
        -F|--function-param)
            COM="Functions with parameters"
            OPT2="-o"
            PATTERN='^(?!((\s*|\t*)|(\s*\t*)*)(#|\/\/|\*)).*(function \K.*)'
            ;;
        -k|--comments)
            COM="Comments"
            OPT2=""
            PATTERN='(^#|^\/\/|^\*|^\/\*)'
            ;;
        -o|--out)
            OUT=`eval echo $2`
            shift
            ;;
        -h|--help)
            _show_help
            exit 0
            ;;
        --)
            shift
            break
            ;;
        *)
            _show_error
            break
            ;;
    esac

    shift

    RES="$RES"$(_construct "$COM" "${PATTERN}")$(_add_padding)

done

if [[ -z $COM || -z $PATTERN ]]; then
    _show_error
    exit 0
fi

_output

exit 0
